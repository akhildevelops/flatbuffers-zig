//!
//! generated by flatc-zig
//! binary:     ./examples/monster/monster.fbs
//! schema:     monster.fbs
//! file ident: //monster.fbs
//! typename    Vec4
//!

const flatbufferz = @import("flatbufferz");

pub const Vec4 = struct {
    v: [4]f32,

    const Self = @This();

    pub fn init(packed_struct: PackedVec4) !Self {
        return .{
            .v = packed_struct.v(),
        };
    }

    pub fn pack(self: Self, builder: *flatbufferz.Builder) !u32 {
        try builder.prep(4, 16);
        try builder.prepend([4]f32, self.v);
        return builder.offset();
    }
};

pub const PackedVec4 = struct {
    table: flatbufferz.Struct,

    const Self = @This();

    pub fn initRoot(bytes: []u8) Self {
        const offset = flatbufferz.encode.read(u32, bytes);
        return Self.initPos(bytes, offset);
    }

    pub fn initPos(bytes: []u8, pos: u32) Self {
        return .{ .table = .{ ._tab = .{ .bytes = bytes, .pos = pos } } };
    }

    pub fn v(self: Self) [4]f32 {
        return self.table.readArray(f32, 0);
    }
};
