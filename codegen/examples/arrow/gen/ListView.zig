//! generated by flatc-zig from Schema.fbs

const flatbuffers = @import("flatbuffers");

/// Represents the same logical types that List can, but contains offsets and
/// sizes allowing for writes in any order and sharing of child values among
/// list values.
pub const ListView = struct {
    const Self = @This();

    pub fn pack(self: Self, builder: *flatbuffers.Builder) flatbuffers.Error!u32 {
        _ = self;
        try builder.startTable();
        return builder.endTable();
    }
};

/// Represents the same logical types that List can, but contains offsets and
/// sizes allowing for writes in any order and sharing of child values among
/// list values.
pub const PackedListView = struct {};
