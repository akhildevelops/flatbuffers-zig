//! generated by flatc-zig from Schema.fbs

const flatbuffers = @import("flatbuffers");
const std = @import("std");
const types = @import("lib.zig");

/// A union is a complex type with children in Field
/// By default ids in the type vector refer to the offsets in the children
/// optionally typeIds provides an indirection between the child offset and the type id
/// for each child `typeIds[offset]` is the id used in the type vector
pub const Union = struct {
    mode: types.UnionMode = .sparse,
    type_ids: []i32,

    const Self = @This();

    pub fn init(allocator: std.mem.Allocator, packed_: PackedUnion) flatbuffers.Error!Self {
        const type_ids_ = try flatbuffers.unpackVector(allocator, i32, packed_, "typeIds");
        errdefer {
            allocator.free(type_ids_);
        }
        return .{
            .mode = try packed_.mode(),
            .type_ids = type_ids_,
        };
    }

    pub fn deinit(self: Self, allocator: std.mem.Allocator) void {
        allocator.free(self.type_ids);
    }

    pub fn pack(self: Self, builder: *flatbuffers.Builder) flatbuffers.Error!u32 {
        const field_offsets = .{
            .type_ids = try builder.prependVector(i32, self.type_ids),
        };

        try builder.startTable();
        try builder.appendTableFieldWithDefault(types.UnionMode, self.mode, .sparse);
        try builder.appendTableFieldOffset(field_offsets.type_ids);
        return builder.endTable();
    }
};

/// A union is a complex type with children in Field
/// By default ids in the type vector refer to the offsets in the children
/// optionally typeIds provides an indirection between the child offset and the type id
/// for each child `typeIds[offset]` is the id used in the type vector
pub const PackedUnion = struct {
    table: flatbuffers.Table,

    const Self = @This();

    pub fn init(size_prefixed_bytes: []u8) flatbuffers.Error!Self {
        return .{ .table = try flatbuffers.Table.init(size_prefixed_bytes) };
    }

    pub fn mode(self: Self) flatbuffers.Error!types.UnionMode {
        return self.table.readFieldWithDefault(types.UnionMode, 0, .sparse);
    }

    pub fn typeIds(self: Self) flatbuffers.Error![]align(1) i32 {
        return self.table.readField([]align(1) i32, 1);
    }
};
