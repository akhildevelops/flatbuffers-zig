//! generated by flatc-zig from Schema.fbs

const flatbuffers = @import("flatbuffers");

pub const Int = struct {
    bit_width: i32 = 0,
    is_signed: bool = false,

    const Self = @This();

    pub fn init(packed_: PackedInt) flatbuffers.Error!Self {
        return .{
            .bit_width = try packed_.bitWidth(),
            .is_signed = try packed_.isSigned(),
        };
    }

    pub fn pack(self: Self, builder: *flatbuffers.Builder) flatbuffers.Error!u32 {
        try builder.startTable();
        try builder.appendTableFieldWithDefault(i32, self.bit_width, 0);
        try builder.appendTableFieldWithDefault(bool, self.is_signed, false);
        return builder.endTable();
    }
};

pub const PackedInt = struct {
    table: flatbuffers.Table,

    const Self = @This();

    pub fn init(size_prefixed_bytes: []u8) flatbuffers.Error!Self {
        return .{ .table = try flatbuffers.Table.init(size_prefixed_bytes) };
    }

    pub fn bitWidth(self: Self) flatbuffers.Error!i32 {
        return self.table.readFieldWithDefault(i32, 0, 0);
    }

    pub fn isSigned(self: Self) flatbuffers.Error!bool {
        return self.table.readFieldWithDefault(bool, 1, false);
    }
};
