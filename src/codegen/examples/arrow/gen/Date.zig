//! generated by flatc-zig from Schema.fbs

const flatbuffers = @import("flatbuffers");
const types = @import("lib.zig");

/// Date is either a 32-bit or 64-bit signed integer type representing an
/// elapsed time since UNIX epoch (1970-01-01), stored in either of two units:
///
/// * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no
///   leap seconds), where the values are evenly divisible by 86400000
/// * Days (32 bits) since the UNIX epoch
pub const Date = struct {
    unit: types.DateUnit = .millisecond,

    const Self = @This();

    pub fn init(packed_: PackedDate) flatbuffers.Error!Self {
        return .{
            .unit = try packed_.unit(),
        };
    }

    pub fn pack(self: Self, builder: *flatbuffers.Builder) flatbuffers.Error!u32 {
        try builder.startTable();
        try builder.appendTableField(types.DateUnit, self.unit);
        return builder.endTable();
    }
};

/// Date is either a 32-bit or 64-bit signed integer type representing an
/// elapsed time since UNIX epoch (1970-01-01), stored in either of two units:
///
/// * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no
///   leap seconds), where the values are evenly divisible by 86400000
/// * Days (32 bits) since the UNIX epoch
pub const PackedDate = struct {
    table: flatbuffers.Table,

    const Self = @This();

    pub fn init(size_prefixed_bytes: []u8) flatbuffers.Error!Self {
        return .{ .table = try flatbuffers.Table.init(size_prefixed_bytes) };
    }

    pub fn unit(self: Self) flatbuffers.Error!types.DateUnit {
        return self.table.readFieldWithDefault(types.DateUnit, 0, .millisecond);
    }
};
