//! generated by flatc-zig from Message.fbs

const flatbuffers = @import("flatbuffers");
const types = @import("lib.zig");

/// Optional compression for the memory buffers constituting IPC message
/// bodies. Intended for use with RecordBatch but could be used for other
/// message types
pub const BodyCompression = struct {
    /// Compressor library.
    /// For LZ4_FRAME, each compressed buffer must consist of a single frame.
    codec: types.CompressionType = .lz4__frame,
    /// Indicates the way the record batch body was compressed
    method: types.BodyCompressionMethod = .buffer,

    const Self = @This();

    pub fn init(packed_: PackedBodyCompression) flatbuffers.Error!Self {
        return .{
            .codec = try packed_.codec(),
            .method = try packed_.method(),
        };
    }

    pub fn pack(self: Self, builder: *flatbuffers.Builder) flatbuffers.Error!u32 {
        try builder.startTable();
        try builder.appendTableFieldWithDefault(types.CompressionType, self.codec, .lz4__frame);
        try builder.appendTableFieldWithDefault(types.BodyCompressionMethod, self.method, .buffer);
        return builder.endTable();
    }
};

/// Optional compression for the memory buffers constituting IPC message
/// bodies. Intended for use with RecordBatch but could be used for other
/// message types
pub const PackedBodyCompression = struct {
    table: flatbuffers.Table,

    const Self = @This();

    pub fn init(size_prefixed_bytes: []u8) flatbuffers.Error!Self {
        return .{ .table = try flatbuffers.Table.init(size_prefixed_bytes) };
    }

    /// Compressor library.
    /// For LZ4_FRAME, each compressed buffer must consist of a single frame.
    pub fn codec(self: Self) flatbuffers.Error!types.CompressionType {
        return self.table.readFieldWithDefault(types.CompressionType, 0, .lz4__frame);
    }

    /// Indicates the way the record batch body was compressed
    pub fn method(self: Self) flatbuffers.Error!types.BodyCompressionMethod {
        return self.table.readFieldWithDefault(types.BodyCompressionMethod, 1, .buffer);
    }
};
