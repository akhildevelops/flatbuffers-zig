//! generated by flatc-zig from Message.fbs

const flatbuffers = @import("flatbuffers");
const std = @import("std");
const types = @import("lib.zig");

pub const Message = struct {
    version: types.MetadataVersion = .v1,
    header: types.MessageHeader,
    body_length: i64 = 0,
    custom_metadata: []types.KeyValue,

    const Self = @This();

    pub fn init(allocator: std.mem.Allocator, packed_: PackedMessage) flatbuffers.Error!Self {
        const header_ = try types.MessageHeader.init(allocator, try packed_.header());
        errdefer {
            header_.deinit(allocator);
        }
        const custom_metadata_ = try flatbuffers.unpackVector(allocator, types.KeyValue, packed_, "customMetadata");
        errdefer {
            for (custom_metadata_) |c| c.deinit(allocator);
            allocator.free(custom_metadata_);
        }
        return .{
            .version = try packed_.version(),
            .header = header_,
            .body_length = try packed_.bodyLength(),
            .custom_metadata = custom_metadata_,
        };
    }

    pub fn deinit(self: Self, allocator: std.mem.Allocator) void {
        self.header.deinit(allocator);
        for (self.custom_metadata) |c| c.deinit(allocator);
        allocator.free(self.custom_metadata);
    }

    pub fn pack(self: Self, builder: *flatbuffers.Builder) flatbuffers.Error!u32 {
        const field_offsets = .{
            .header = try self.header.pack(builder),
            .custom_metadata = try builder.prependVectorOffsets(types.KeyValue, self.custom_metadata),
        };

        try builder.startTable();
        try builder.appendTableField(types.MetadataVersion, self.version);
        try builder.appendTableField(types.PackedMessageHeader.Tag, self.header);
        try builder.appendTableFieldOffset(field_offsets.header);
        try builder.appendTableField(i64, self.body_length);
        try builder.appendTableFieldOffset(field_offsets.custom_metadata);
        return builder.endTable();
    }
};

pub const PackedMessage = struct {
    table: flatbuffers.Table,

    const Self = @This();

    pub fn init(size_prefixed_bytes: []u8) flatbuffers.Error!Self {
        return .{ .table = try flatbuffers.Table.init(size_prefixed_bytes) };
    }

    pub fn version(self: Self) flatbuffers.Error!types.MetadataVersion {
        return self.table.readFieldWithDefault(types.MetadataVersion, 0, .v1);
    }

    pub fn headerType(self: Self) flatbuffers.Error!types.PackedMessageHeader.Tag {
        return self.table.readFieldWithDefault(types.PackedMessageHeader.Tag, 1, .none);
    }

    pub fn header(self: Self) flatbuffers.Error!types.PackedMessageHeader {
        return switch (try self.headerType()) {
            inline else => |tag| {
                var result = @unionInit(types.PackedMessageHeader, @tagName(tag), undefined);
                const field = &@field(result, @tagName(tag));
                field.* = try self.table.readField(@TypeOf(field.*), 2);
                return result;
            },
        };
    }

    pub fn bodyLength(self: Self) flatbuffers.Error!i64 {
        return self.table.readFieldWithDefault(i64, 3, 0);
    }

    pub fn customMetadataLen(self: Self) flatbuffers.Error!u32 {
        return self.table.readFieldVectorLen(4);
    }
    pub fn customMetadata(self: Self, index: usize) flatbuffers.Error!types.PackedKeyValue {
        return self.table.readFieldVectorItem(types.PackedKeyValue, 4, index);
    }
};
