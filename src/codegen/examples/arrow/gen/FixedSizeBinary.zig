//! generated by flatc-zig from Schema.fbs

const flatbuffers = @import("flatbuffers");

pub const FixedSizeBinary = struct {
    /// Number of bytes per value
    byte_width: i32 = 0,

    const Self = @This();

    pub fn init(packed_: PackedFixedSizeBinary) flatbuffers.Error!Self {
        return .{
            .byte_width = try packed_.byteWidth(),
        };
    }

    pub fn pack(self: Self, builder: *flatbuffers.Builder) flatbuffers.Error!u32 {
        try builder.startTable();
        try builder.appendTableField(i32, self.byte_width);
        return builder.endTable();
    }
};

pub const PackedFixedSizeBinary = struct {
    table: flatbuffers.Table,

    const Self = @This();

    pub fn init(size_prefixed_bytes: []u8) flatbuffers.Error!Self {
        return .{ .table = try flatbuffers.Table.init(size_prefixed_bytes) };
    }

    /// Number of bytes per value
    pub fn byteWidth(self: Self) flatbuffers.Error!i32 {
        return self.table.readFieldWithDefault(i32, 0, 0);
    }
};
